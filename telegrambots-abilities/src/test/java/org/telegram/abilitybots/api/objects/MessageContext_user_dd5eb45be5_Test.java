// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.objects;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.abilitybots.api.bot.BaseAbilityBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class MessageContext_user_dd5eb45be5_Test {

    @Mock
    private BaseAbilityBot baseAbilityBot;

    @Mock
    private Update update;

    @InjectMocks
    private MessageContext messageContext;

    private User user;

    @BeforeEach
    public void setup() {
        user = new User();
        user.setFirstName("Test");
        user.setLastName("User");
        when(update.getMessage().getFrom()).thenReturn(user);
    }

    @Test
    public void testUser_ReturnsCorrectUser() {
        User result = messageContext.user();
        assertEquals(user, result, "Returned user should match the mocked user");
    }

    @Test
    public void testUser_ReturnsNullWhenNoUser() {
        when(update.getMessage().getFrom()).thenReturn(null);
        User result = messageContext.user();
        assertEquals(null, result, "Returned user should be null when no user is present in the update");
    }
}
