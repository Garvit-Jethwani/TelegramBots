// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.db.DBContext;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.objects.Privacy;
import org.telegram.abilitybots.api.util.AbilityUtils;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class DefaultAbilities_reportStats_db9ce8a977_Test {

    @Mock
    private DBContext dbContext;

    @Mock
    private MessageContext messageContext;

    private DefaultAbilities defaultAbilities;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        defaultAbilities = new DefaultAbilities(dbContext);
    }

    @Test
    public void testReportStatsSuccess() throws TelegramApiException {
        when(messageContext.update()).thenReturn(Optional.of(new Update()));
        when(messageContext.user()).thenReturn(Optional.of(new User()));
        when(dbContext.userAbility()).thenReturn(Optional.of(new Ability()));

        Ability result = defaultAbilities.reportStats();

        assertNotNull(result);
        assertEquals(Privacy.ADMIN, result.privacy());
        verify(dbContext, times(1)).userAbility();
    }

    @Test
    public void testReportStatsFailure() throws TelegramApiException {
        when(messageContext.update()).thenReturn(Optional.empty());
        when(messageContext.user()).thenReturn(Optional.empty());
        when(dbContext.userAbility()).thenReturn(Optional.empty());

        Ability result = defaultAbilities.reportStats();

        assertNotNull(result);
        assertEquals(Privacy.ADMIN, result.privacy());
        verify(dbContext, times(1)).userAbility();
    }
}
