// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;

import java.util.HashSet;
import java.util.Set;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class DefaultAbilities_claimCreator_71ab3eb32b_Test {

    @Mock
    private YourClassName bot; // TODO: Replace YourClassName with the actual class name of bot

    @Mock
    private MessageContext ctx;

    private DefaultAbilities_claimCreator_71ab3eb32b defaultAbilities;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
        defaultAbilities = new DefaultAbilities_claimCreator_71ab3eb32b(bot);
    }

    @Test
    public void testClaimCreator_whenAdminsContainsId() {
        Set<Long> admins = new HashSet<>();
        admins.add(1L);
        when(bot.admins()).thenReturn(admins);
        when(bot.creatorId()).thenReturn(1L);

        Ability ability = defaultAbilities.claimCreator();
        ability.action().accept(ctx);

        verify(bot).send("ABILITY_CLAIM_FAIL", ctx);
    }

    @Test
    public void testClaimCreator_whenAdminsDoesNotContainId() {
        Set<Long> admins = new HashSet<>();
        when(bot.admins()).thenReturn(admins);
        when(bot.creatorId()).thenReturn(1L);

        Ability ability = defaultAbilities.claimCreator();
        ability.action().accept(ctx);

        assertTrue(admins.contains(1L));
        verify(bot).send("ABILITY_CLAIM_SUCCESS", ctx);
    }
}
