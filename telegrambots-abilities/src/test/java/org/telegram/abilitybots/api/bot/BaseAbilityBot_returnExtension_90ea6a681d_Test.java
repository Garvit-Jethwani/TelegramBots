// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.telegram.abilitybots.api.util.AbilityExtension;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class BaseAbilityBot_returnExtension_90ea6a681d_Test {

    @Mock
    private Logger log;

    @InjectMocks
    private BaseAbilityBot baseAbilityBot;

    @Test
    public void testReturnExtensionSuccess() throws Exception {
        // Arrange
        Object obj = new Object() {
            public AbilityExtension method() {
                return new AbilityExtension() {};
            }
        };
        Method method = obj.getClass().getDeclaredMethod("method");

        // Act
        AbilityExtension result = baseAbilityBot.returnExtension(obj).apply(method);

        // Assert
        assertNotNull(result);
        verify(log, never()).error(anyString(), any(Exception.class));
    }

    @Test
    public void testReturnExtensionFailure() throws Exception {
        // Arrange
        Object obj = new Object();
        Method method = obj.getClass().getDeclaredMethod("toString");

        // Act & Assert
        Exception exception = assertThrows(RuntimeException.class, () -> {
            baseAbilityBot.returnExtension(obj).apply(method);
        });

        // Verify
        verify(log, times(1)).error(eq("Could not add ability extension"), any(Exception.class));
        assertEquals("java.lang.reflect.InvocationTargetException", exception.getCause().getClass().getName());
    }
}
