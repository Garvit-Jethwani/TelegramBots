// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.util.AbilityExtension;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

public class DefaultAbilities_backupDB_7f921a5ce2_Test {

    @Mock
    private AbilityExtension bot;

    @InjectMocks
    private DefaultAbilities defaultAbilities;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testBackupDB_Success() {
        when(bot.db.backup()).thenReturn("backup data");
        Ability ability = defaultAbilities.backupDB();
        assertNotNull(ability);
        // TODO: Replace with actual chatId
        ability.action().apply(MessageContext.newContext(null, null, 0, "chatId"));
        verify(bot.sender, times(1)).sendDocument(any(SendDocument.class));
    }

    @Test
    public void testBackupDB_FileNotFoundException() {
        when(bot.db.backup()).thenReturn("backup data");
        doThrow(FileNotFoundException.class).when(bot.sender).sendDocument(any(SendDocument.class));
        Ability ability = defaultAbilities.backupDB();
        assertNotNull(ability);
        // TODO: Replace with actual chatId
        ability.action().apply(MessageContext.newContext(null, null, 0, "chatId"));
        verify(bot.sender, times(1)).sendDocument(any(SendDocument.class));
    }

    @Test
    public void testBackupDB_TelegramApiException() {
        when(bot.db.backup()).thenReturn("backup data");
        doThrow(TelegramApiException.class).when(bot.sender).sendDocument(any(SendDocument.class));
        Ability ability = defaultAbilities.backupDB();
        assertNotNull(ability);
        // TODO: Replace with actual chatId
        ability.action().apply(MessageContext.newContext(null, null, 0, "chatId"));
        verify(bot.sender, times(1)).sendDocument(any(SendDocument.class));
    }
}
