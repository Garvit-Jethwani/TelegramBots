// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.telegram.abilitybots.api.util.AbilityUtils;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

public class BaseAbilityBot_hasUser_bfdd47c25d_Test {

    private BaseAbilityBot bot;

    @BeforeEach
    public void setUp() {
        bot = Mockito.mock(BaseAbilityBot.class);
    }

    @Test
    public void testHasUser_WithValidUser() {
        Update update = Mockito.mock(Update.class);
        User user = Mockito.mock(User.class);

        Mockito.when(AbilityUtils.getUser(update)).thenReturn(user);
        Mockito.when(bot.hasUser(update)).thenCallRealMethod();

        Assertions.assertTrue(bot.hasUser(update));
    }

    @Test
    public void testHasUser_WithEmptyUser() {
        Update update = Mockito.mock(Update.class);
        User user = BaseAbilityBot.EMPTY_USER;

        Mockito.when(AbilityUtils.getUser(update)).thenReturn(user);
        Mockito.when(bot.hasUser(update)).thenCallRealMethod();

        Assertions.assertFalse(bot.hasUser(update));
    }

    @Test
    public void testHasUser_WithException() {
        Update update = Mockito.mock(Update.class);

        Mockito.when(AbilityUtils.getUser(update)).thenThrow(new RuntimeException());
        Mockito.when(bot.hasUser(update)).thenCallRealMethod();

        Assertions.assertThrows(RuntimeException.class, () -> bot.hasUser(update));
    }
}
