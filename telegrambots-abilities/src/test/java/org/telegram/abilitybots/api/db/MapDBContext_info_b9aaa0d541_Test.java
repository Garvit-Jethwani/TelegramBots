// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.db;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import java.util.*;

import static java.lang.String.format;
import static java.util.Objects.isNull;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class MapDBContext_info_b9aaa0d541_Test {

    @Mock
    private DB db;

    private MapDBContext context;

    @Before
    public void setUp() {
        context = new MapDBContext(db);
    }

    @Test
    public void testInfoForSet() {
        Set<String> set = new HashSet<>(Arrays.asList("test1", "test2", "test3"));
        when(db.get("testSet")).thenReturn(set);
        String result = context.info("testSet");
        assertEquals("testSet - Set - 3", result);
    }

    @Test
    public void testInfoForList() {
        List<String> list = new ArrayList<>(Arrays.asList("test1", "test2", "test3"));
        when(db.get("testList")).thenReturn(list);
        String result = context.info("testList");
        assertEquals("testList - List - 3", result);
    }

    @Test
    public void testInfoForMap() {
        Map<String, String> map = new HashMap<>();
        map.put("key1", "value1");
        map.put("key2", "value2");
        when(db.get("testMap")).thenReturn(map);
        String result = context.info("testMap");
        assertEquals("testMap - Map - 2", result);
    }

    @Test(expected = IllegalStateException.class)
    public void testInfoForNonExistentName() {
        when(db.get("nonExistent")).thenReturn(null);
        context.info("nonExistent");
    }

    @Test
    public void testInfoForOtherStructure() {
        String otherStruct = "testStruct";
        when(db.get("other")).thenReturn(otherStruct);
        String result = context.info("other");
        assertEquals("other - String", result);
    }
}
