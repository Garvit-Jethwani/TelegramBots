// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.telegram.telegrambots.bots.DefaultAbsSender;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;
import org.telegram.telegrambots.util.WebhookUtils;

import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

@RunWith(MockitoJUnitRunner.class)
public class AbilityBot_clearWebhook_958398abb5_Test {

    @Mock
    private DefaultAbsSender defaultAbsSender;
    
    @Mock
    private WebhookUtils webhookUtils;

    @Before
    public void setUp() {
        // TODO: Initialize the AbilityBot instance with the mocked DefaultAbsSender
    }

    @Test
    public void testClearWebhook_Success() throws TelegramApiRequestException {
        // Call the method under test
        defaultAbsSender.clearWebhook();

        // Verify that the clearWebhook method was called on the WebhookUtils instance
        verify(webhookUtils, times(1)).clearWebhook(defaultAbsSender);
    }

    @Test(expected = TelegramApiRequestException.class)
    public void testClearWebhook_Failure() throws TelegramApiRequestException {
        // Arrange: Make the clearWebhook method throw an exception when called
        doThrow(TelegramApiRequestException.class).when(webhookUtils).clearWebhook(defaultAbsSender);

        // Act: Call the method under test
        defaultAbsSender.clearWebhook();

        // Assert: An exception is expected, so no need for further assertions
    }
}
