// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatAdministrators;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberAdministrator;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMemberOwner;

import java.util.Arrays;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.when;

class BaseAbilityBot_isGroupAdmin_5db29f4a3f_Test {

    @Mock
    private SilentSender silent;

    @InjectMocks
    private BaseAbilityBot bot;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void isGroupAdmin_whenUserIsOwner_returnTrue() {
        long chatId = 123L;
        long userId = 456L;
        User user = new User();
        user.setId(userId);

        ChatMember member = new ChatMemberOwner();
        member.setStatus(ChatMemberOwner.STATUS);
        member.setUser(user);

        when(silent.execute(GetChatAdministrators.builder().chatId(chatId).build()))
                .thenReturn(Optional.of(Arrays.asList(member)));

        assertTrue(bot.isGroupAdmin(chatId, userId));
    }

    @Test
    void isGroupAdmin_whenUserIsAdmin_returnTrue() {
        long chatId = 123L;
        long userId = 456L;
        User user = new User();
        user.setId(userId);

        ChatMember member = new ChatMemberAdministrator();
        member.setStatus(ChatMemberAdministrator.STATUS);
        member.setUser(user);

        when(silent.execute(GetChatAdministrators.builder().chatId(chatId).build()))
                .thenReturn(Optional.of(Arrays.asList(member)));

        assertTrue(bot.isGroupAdmin(chatId, userId));
    }

    @Test
    void isGroupAdmin_whenUserIsNotAdmin_returnFalse() {
        long chatId = 123L;
        long userId = 456L;
        User user = new User();
        user.setId(userId);

        ChatMember member = new ChatMemberAdministrator();
        member.setStatus(ChatMemberAdministrator.STATUS);
        member.setUser(user);

        when(silent.execute(GetChatAdministrators.builder().chatId(chatId).build()))
                .thenReturn(Optional.of(Arrays.asList(member)));

        assertFalse(bot.isGroupAdmin(chatId, 789L));
    }

    @Test
    void isGroupAdmin_whenNoAdmins_returnFalse() {
        long chatId = 123L;
        long userId = 456L;

        when(silent.execute(GetChatAdministrators.builder().chatId(chatId).build()))
                .thenReturn(Optional.empty());

        assertFalse(bot.isGroupAdmin(chatId, userId));
    }
}
