// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;

import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class DefaultAbilities_banUser_70382b1f59_Test {
    @Mock
    private DefaultAbilities defaultAbilities;
    @Mock
    private MessageContext ctx;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testBanUser_success() {
        Set<Long> blacklist = new HashSet<>();
        when(defaultAbilities.bot.blacklist()).thenReturn(blacklist);
        when(defaultAbilities.getUserIdSendError(anyString(), any())).thenReturn(1L);
        when(defaultAbilities.stripTag(anyString())).thenReturn("user");
        when(ctx.firstArg()).thenReturn("user");
        when(ctx.user().getId()).thenReturn(2L);
        when(ctx.user().getUserName()).thenReturn("user");
        when(defaultAbilities.bot.creatorId()).thenReturn(3L);

        Ability ability = defaultAbilities.banUser();
        ability.action().accept(ctx);

        verify(defaultAbilities, times(1)).sendMd(anyString(), any(), anyString());
        assertEquals(1, blacklist.size());
    }

    @Test
    public void testBanUser_failure() {
        Set<Long> blacklist = new HashSet<>();
        blacklist.add(1L);
        when(defaultAbilities.bot.blacklist()).thenReturn(blacklist);
        when(defaultAbilities.getUserIdSendError(anyString(), any())).thenReturn(1L);
        when(defaultAbilities.stripTag(anyString())).thenReturn("user");
        when(ctx.firstArg()).thenReturn("user");
        when(ctx.user().getId()).thenReturn(2L);
        when(ctx.user().getUserName()).thenReturn("user");
        when(defaultAbilities.bot.creatorId()).thenReturn(3L);

        Ability ability = defaultAbilities.banUser();
        ability.action().accept(ctx);

        verify(defaultAbilities, times(1)).sendMd(anyString(), any(), anyString());
        assertEquals(1, blacklist.size());
    }
}
