// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.db;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mapdb.DB;
import org.mapdb.DBMaker;
import org.mapdb.Serializer;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.abilitybots.api.util.Pair;
import java.io.IOException;
import java.util.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class MapDBContext_backup_17244c77b0_Test {

    @Mock
    private DB db;

    private ObjectMapper mapper;

    @BeforeEach
    public void setUp() {
        db = DBMaker.memoryDB().make();
        mapper = new ObjectMapper();
    }

    @Test
    public void testBackup_success() throws JsonProcessingException {
        Map<String, Object> collectedMap = new HashMap<>();
        collectedMap.put("key1", "value1");
        collectedMap.put("key2", "value2");

        String expected = mapper.writeValueAsString(collectedMap);

        when(db.hashMap("map", Serializer.STRING, Serializer.JAVA).createOrOpen()).thenReturn(collectedMap);

        String actual = (String) backup();

        assertEquals(expected, actual);
    }

    @Test
    public void testBackup_emptyMap() throws JsonProcessingException {
        Map<String, Object> collectedMap = new HashMap<>();

        String expected = mapper.writeValueAsString(collectedMap);

        when(db.hashMap("map", Serializer.STRING, Serializer.JAVA).createOrOpen()).thenReturn(collectedMap);

        String actual = (String) backup();

        assertEquals(expected, actual);
    }

    public Object backup() {
        Map<String, Object> collectedMap = localCopy();
        return writeAsString(collectedMap);
    }

    private Map<String, Object> localCopy() {
        return db.hashMap("map", Serializer.STRING, Serializer.JAVA).createOrOpen();
    }

    private String writeAsString(Object object) {
        try {
            return mapper.writeValueAsString(object);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return null;
        }
    }
}
