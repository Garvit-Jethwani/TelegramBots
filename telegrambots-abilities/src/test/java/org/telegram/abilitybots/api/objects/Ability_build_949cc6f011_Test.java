// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.objects;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.abilitybots.api.bot.BaseAbilityBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@SpringBootTest
public class Ability_build_949cc6f011_Test {

    @Test
    public void testBuild() {
        // TODO: Initialize the required variables here.
        String name = "test";
        String info = "test info";
        Locality locality = Locality.USER;
        Privacy privacy = Privacy.PUBLIC;
        int argNum = 1;
        boolean statsEnabled = true;
        Consumer<Update> action = mock(Consumer.class);
        Runnable postAction = () -> {};
        List<String> replies = Arrays.asList("reply1", "reply2");
        Predicate<Update> flags = mock(Predicate.class);

        // Call the method to test
        Ability ability = new Ability(name, info, locality, privacy, argNum, statsEnabled, action, postAction, replies, flags);

        // Assertions to verify the expected output matches the actual output
        assertEquals(name, ability.name());
        assertEquals(info, ability.info());
        assertEquals(locality, ability.locality());
        assertEquals(privacy, ability.privacy());
        assertEquals(argNum, ability.argNum());
        assertEquals(statsEnabled, ability.statsEnabled());
        assertEquals(action, ability.action());
        assertEquals(postAction, ability.postAction());
        assertEquals(replies, ability.replies());
        assertEquals(flags, ability.flags());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testBuildWithInvalidArgs() {
        // TODO: Initialize the required variables here with invalid values.
        String name = "";
        String info = "test info";
        Locality locality = Locality.USER;
        Privacy privacy = Privacy.PUBLIC;
        int argNum = 1;
        boolean statsEnabled = true;
        Consumer<Update> action = mock(Consumer.class);
        Runnable postAction = () -> {};
        List<String> replies = Arrays.asList("reply1", "reply2");
        Predicate<Update> flags = mock(Predicate.class);

        // Call the method to test
        Ability ability = new Ability(name, info, locality, privacy, argNum, statsEnabled, action, postAction, replies, flags);
    }
}
