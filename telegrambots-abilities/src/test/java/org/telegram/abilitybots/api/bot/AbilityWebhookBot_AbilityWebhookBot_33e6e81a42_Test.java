// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.db.DBContext;
import org.telegram.abilitybots.api.toggle.AbilityToggle;
import org.telegram.abilitybots.api.toggle.DefaultToggle;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.updates.SetWebhook;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.WebhookBot;
import org.telegram.telegrambots.util.WebhookUtils;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class AbilityWebhookBot_AbilityWebhookBot_33e6e81a42_Test {

    @Mock
    private DefaultBotOptions botOptions;

    private AbilityWebhookBot bot;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        bot = new AbilityWebhookBot("test_token", "test_username", "test_path", botOptions);
    }

    @Test
    public void testAbilityWebhookBotConstructorSuccess() {
        assertEquals("test_token", bot.getBotToken());
        assertEquals("test_username", bot.getBotUsername());
        assertEquals("test_path", bot.getBotPath());
        assertEquals(botOptions, bot.getOptions());
    }

    @Test
    public void testAbilityWebhookBotConstructorFailure() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            new AbilityWebhookBot(null, "test_username", "test_path", botOptions);
        });
        assertEquals("Bot token can not be null", exception.getMessage());

        exception = assertThrows(IllegalArgumentException.class, () -> {
            new AbilityWebhookBot("test_token", null, "test_path", botOptions);
        });
        assertEquals("Bot username can not be null", exception.getMessage());

        exception = assertThrows(IllegalArgumentException.class, () -> {
            new AbilityWebhookBot("test_token", "test_username", null, botOptions);
        });
        assertEquals("Bot path can not be null", exception.getMessage());
    }
}
