// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

public class DefaultAbilities_downloadFileWithId_3d4e2118b3_Test {

    @Mock
    private Bot bot;

    @InjectMocks
    private DefaultAbilities defaultAbilities;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testDownloadFileWithId_Success() throws TelegramApiException {
        // TODO: Replace "testFileId" with actual file id
        String fileId = "testFileId";
        File expectedFile = new File("expectedFilePath");

        when(bot.sender.execute(GetFile.builder().fileId(fileId).build())).thenReturn(expectedFile);
        when(bot.sender.downloadFile(expectedFile)).thenReturn(expectedFile);

        File actualFile = defaultAbilities.downloadFileWithId(fileId);

        assertEquals(expectedFile, actualFile);
    }

    @Test
    public void testDownloadFileWithId_TelegramApiException() throws TelegramApiException {
        // TODO: Replace "testFileId" with actual file id
        String fileId = "testFileId";

        when(bot.sender.execute(GetFile.builder().fileId(fileId).build())).thenThrow(TelegramApiException.class);

        assertThrows(TelegramApiException.class, () -> defaultAbilities.downloadFileWithId(fileId));
    }
}
