// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.objects.Privacy;
import org.junit.jupiter.api.extension.ExtendWith;
import java.util.HashSet;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class DefaultAbilities_demoteAdmin_13364a6fbe_Test {
    @Mock
    private DefaultAbilities defaultAbilities;

    @Mock
    private MessageContext ctx;

    @Test
    public void testDemoteAdminSuccess() {
        String username = "testUser";
        Long userId = 123L;
        Set<Long> admins = new HashSet<>();
        admins.add(userId);

        when(defaultAbilities.stripTag(Mockito.anyString())).thenReturn(username);
        when(defaultAbilities.getUserIdSendError(Mockito.anyString(), Mockito.any())).thenReturn(userId);
        when(defaultAbilities.bot.admins()).thenReturn(admins);

        Ability ability = defaultAbilities.demoteAdmin();
        ability.action().accept(ctx);

        assertEquals(Privacy.ADMIN, ability.privacy());
        assertEquals(1, ability.input());
        assertEquals(false, admins.contains(userId));
    }

    @Test
    public void testDemoteAdminFail() {
        String username = "testUser";
        Long userId = 123L;
        Set<Long> admins = new HashSet<>();

        when(defaultAbilities.stripTag(Mockito.anyString())).thenReturn(username);
        when(defaultAbilities.getUserIdSendError(Mockito.anyString(), Mockito.any())).thenReturn(userId);
        when(defaultAbilities.bot.admins()).thenReturn(admins);

        Ability ability = defaultAbilities.demoteAdmin();
        ability.action().accept(ctx);

        assertEquals(Privacy.ADMIN, ability.privacy());
        assertEquals(1, ability.input());
        assertEquals(false, admins.contains(userId));
    }
}
