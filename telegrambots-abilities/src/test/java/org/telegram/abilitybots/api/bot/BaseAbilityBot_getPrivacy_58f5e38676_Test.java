// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.telegram.abilitybots.api.objects.Privacy;
import org.telegram.telegrambots.meta.api.objects.Update;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class BaseAbilityBot_getPrivacy_58f5e38676_Test {

    @Test
    public void testGetPrivacyCreator() {
        long id = 12345;
        Update update = Mockito.mock(Update.class);
        BaseAbilityBot bot = Mockito.mock(BaseAbilityBot.class);

        when(bot.isCreator(id)).thenReturn(true);

        Privacy privacy = bot.getPrivacy(update, id);
        assertEquals(Privacy.CREATOR, privacy);
    }

    @Test
    public void testGetPrivacyAdmin() {
        long id = 12345;
        Update update = Mockito.mock(Update.class);
        BaseAbilityBot bot = Mockito.mock(BaseAbilityBot.class);

        when(bot.isCreator(id)).thenReturn(false);
        when(bot.isAdmin(id)).thenReturn(true);

        Privacy privacy = bot.getPrivacy(update, id);
        assertEquals(Privacy.ADMIN, privacy);
    }

    @Test
    public void testGetPrivacyGroupAdmin() {
        long id = 12345;
        Update update = Mockito.mock(Update.class);
        BaseAbilityBot bot = Mockito.mock(BaseAbilityBot.class);

        when(bot.isCreator(id)).thenReturn(false);
        when(bot.isAdmin(id)).thenReturn(false);
        when(bot.isGroupUpdate(update)).thenReturn(true);
        when(bot.isGroupAdmin(update, id)).thenReturn(true);

        Privacy privacy = bot.getPrivacy(update, id);
        assertEquals(Privacy.GROUP_ADMIN, privacy);
    }

    @Test
    public void testGetPrivacyPublic() {
        long id = 12345;
        Update update = Mockito.mock(Update.class);
        BaseAbilityBot bot = Mockito.mock(BaseAbilityBot.class);

        when(bot.isCreator(id)).thenReturn(false);
        when(bot.isAdmin(id)).thenReturn(false);
        when(bot.isGroupUpdate(update)).thenReturn(false);
        when(bot.isGroupAdmin(update, id)).thenReturn(false);

        Privacy privacy = bot.getPrivacy(update, id);
        assertEquals(Privacy.PUBLIC, privacy);
    }
}
