// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.db;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mapdb.Atomic;
import org.mapdb.DB;
import org.mapdb.DBMaker;
import org.mapdb.Serializer;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.abilitybots.api.util.Pair;

import java.io.IOException;
import java.util.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

public class MapDBContext_getVar_4e3494be17_Test {
    @Mock
    DB db;

    @Mock
    Atomic.Var<Object> atomicVar;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetVarSuccess() {
        when(db.atomicVar(anyString())).thenReturn(atomicVar);

        MapDBContext mapDBContext = new MapDBContext(db);
        Var<Object> var = mapDBContext.getVar("testVar");

        assertEquals(atomicVar, var.getUnderlying());
    }

    @Test
    public void testGetVarFailure() {
        when(db.atomicVar(anyString())).thenThrow(new IllegalArgumentException());

        MapDBContext mapDBContext = new MapDBContext(db);

        assertThrows(IllegalArgumentException.class, () -> mapDBContext.getVar("testVar"));
    }
}
