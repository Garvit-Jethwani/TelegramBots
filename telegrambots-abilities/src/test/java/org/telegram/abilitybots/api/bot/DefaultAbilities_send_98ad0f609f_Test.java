// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class DefaultAbilities_send_98ad0f609f_Test {

    @Mock
    private DefaultAbilities bot;

    @Mock
    private Update update;

    @Mock
    private Message message;

    @Mock
    private User user;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSendSuccess() throws TelegramApiException {
        when(update.getMessage()).thenReturn(message);
        when(message.getChatId()).thenReturn(1L);
        when(bot.silent.send("test message", 1L)).thenReturn(Optional.of(message));
        when(AbilityUtils.getUser(update)).thenReturn(user);
        when(user.getLanguageCode()).thenReturn("en");

        Optional<Message> result = bot.send("test message", update);
        assertEquals(Optional.of(message), result);
    }

    @Test
    public void testSendFailure() throws TelegramApiException {
        when(update.getMessage()).thenReturn(message);
        when(message.getChatId()).thenReturn(1L);
        when(bot.silent.send("test message", 1L)).thenReturn(Optional.empty());
        when(AbilityUtils.getUser(update)).thenReturn(user);
        when(user.getLanguageCode()).thenReturn("en");

        Optional<Message> result = bot.send("test message", update);
        assertEquals(Optional.empty(), result);
    }
}
