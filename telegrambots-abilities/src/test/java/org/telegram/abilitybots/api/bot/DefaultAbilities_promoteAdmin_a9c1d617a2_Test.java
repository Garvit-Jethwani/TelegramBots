// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.telegrambots.meta.api.objects.User;

import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class DefaultAbilities_promoteAdmin_a9c1d617a2_Test {

    @InjectMocks
    private DefaultAbilities defaultAbilities;

    @Mock
    private MessageContext ctx;

    @Mock
    private User user;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testPromoteAdminSuccess() {
        String username = "testUser";
        Long userId = 123L;
        Set<Long> admins = new HashSet<>();

        when(ctx.firstArg()).thenReturn(username);
        when(defaultAbilities.getUserIdSendError(username, ctx)).thenReturn(userId);
        when(defaultAbilities.bot.admins()).thenReturn(admins);

        Ability ability = defaultAbilities.promoteAdmin();
        ability.action().apply(ctx);

        assertTrue(admins.contains(userId));
    }

    @Test
    public void testPromoteAdminFailure() {
        String username = "testUser";
        Long userId = 123L;
        Set<Long> admins = new HashSet<>();
        admins.add(userId);

        when(ctx.firstArg()).thenReturn(username);
        when(defaultAbilities.getUserIdSendError(username, ctx)).thenReturn(userId);
        when(defaultAbilities.bot.admins()).thenReturn(admins);

        Ability ability = defaultAbilities.promoteAdmin();
        ability.action().apply(ctx);

        assertTrue(admins.contains(userId));
        verify(defaultAbilities, times(1)).sendMd(anyString(), eq(ctx), anyString());
    }
}
