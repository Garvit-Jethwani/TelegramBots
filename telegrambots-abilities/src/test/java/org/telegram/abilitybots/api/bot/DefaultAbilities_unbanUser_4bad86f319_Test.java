// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.HashSet;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class DefaultAbilities_unbanUser_4bad86f319_Test {

    @Mock
    private MessageContext context;

    @Mock
    private User user;

    @Mock
    private Message message;

    @InjectMocks
    private DefaultAbilities defaultAbilities;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(context.user()).thenReturn(user);
        when(user.getLanguageCode()).thenReturn("en");
        when(context.firstArg()).thenReturn("@username");
        when(context.chatId()).thenReturn(12345L);
    }

    @Test
    public void testUnbanUserSuccess() {
        Set<Long> blacklist = new HashSet<>();
        blacklist.add(123L);
        when(defaultAbilities.bot.blacklist()).thenReturn(blacklist);
        when(defaultAbilities.getUserIdSendError("@username", context)).thenReturn(123L);
        Ability ability = defaultAbilities.unbanUser();
        ability.action().apply(context);
        verify(defaultAbilities.bot.silent(), times(1)).sendMd(anyString(), eq(12345L));
    }

    @Test
    public void testUnbanUserFail() {
        Set<Long> blacklist = new HashSet<>();
        blacklist.add(123L);
        when(defaultAbilities.bot.blacklist()).thenReturn(blacklist);
        when(defaultAbilities.getUserIdSendError("@username", context)).thenReturn(456L);
        Ability ability = defaultAbilities.unbanUser();
        ability.action().apply(context);
        verify(defaultAbilities.bot.silent(), times(1)).sendMd(anyString(), eq(12345L));
    }
}
