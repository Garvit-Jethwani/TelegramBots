// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.objects;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.abilitybots.api.bot.BaseAbilityBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import java.util.Arrays;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Predicate;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class Ability_Ability_fb1a73f060_Test {

    private Ability ability;
    private Consumer<MessageContext> action;
    private Consumer<MessageContext> postAction;

    @BeforeEach
    public void setUp() {
        action = mock(Consumer.class);
        postAction = mock(Consumer.class);
        ability = new Ability("testName", "testInfo", Locality.ALL, Privacy.PUBLIC, 0, true, action, postAction, null);
    }

    @Test
    public void testAbilityCreation() {
        assertAll("Ability",
                () -> assertEquals("testName", ability.name()),
                () -> assertEquals("testInfo", ability.info()),
                () -> assertEquals(Locality.ALL, ability.locality()),
                () -> assertEquals(Privacy.PUBLIC, ability.privacy()),
                () -> assertEquals(0, ability.argNum()),
                () -> assertEquals(true, ability.statsEnabled()),
                () -> assertEquals(action, ability.action()),
                () -> assertEquals(postAction, ability.postAction())
        );
    }

    @Test
    public void testAbilityCreationWithInvalidName() {
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            new Ability("testName_with_more_than_31_characters", "testInfo", Locality.ALL, Privacy.PUBLIC, 0, true, action, postAction, null);
        });

        String expectedMessage = "Method name can only contain alpha-numeric characters and underscores, cannot be longer than 31 characters, empty or null";
        String actualMessage = exception.getMessage();
        assertTrue(actualMessage.contains(expectedMessage));
    }
}
