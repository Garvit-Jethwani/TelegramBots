// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.bot;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.telegram.abilitybots.api.db.DBContext;
import org.telegram.abilitybots.api.objects.Ability;
import org.telegram.abilitybots.api.objects.MessageContext;
import org.telegram.abilitybots.api.objects.Privacy;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

public class DefaultAbilities_commands_d9f6d22f7c_Test {

    @Mock
    private DBContext dbContext;

    @Mock
    private MessageContext messageContext;

    @Mock
    private Ability ability;

    private DefaultAbilities defaultAbilities;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        defaultAbilities = new DefaultAbilities(dbContext);
    }

    @Test
    public void testCommands() {
        when(messageContext.update()).thenReturn("update");
        when(messageContext.user().getId()).thenReturn(1);
        when(ability.name()).thenReturn("ability");
        when(ability.info()).thenReturn("info");
        when(ability.privacy()).thenReturn(Privacy.PUBLIC);
        when(dbContext.abilities()).thenReturn(Collections.singletonMap("ability", ability));

        Ability result = defaultAbilities.commands();

        assertEquals("ability", result.name());
        assertEquals("info", result.info());
        assertEquals(Privacy.PUBLIC, result.privacy());
    }

    @Test
    public void testCommands_noInfo() {
        when(messageContext.update()).thenReturn("update");
        when(messageContext.user().getId()).thenReturn(1);
        when(ability.name()).thenReturn("ability");
        when(ability.info()).thenReturn("");
        when(ability.privacy()).thenReturn(Privacy.PUBLIC);
        when(dbContext.abilities()).thenReturn(Collections.singletonMap("ability", ability));

        Ability result = defaultAbilities.commands();

        assertEquals("ability", result.name());
        assertEquals("", result.info());
        assertEquals(Privacy.PUBLIC, result.privacy());
    }
}
