// Test generated by RoostGPT for test telegramBot using AI Type Open AI and AI Model gpt-4

package org.telegram.abilitybots.api.db;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.*;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class MapDBContext_clear_5c808ea37c_Test {

    @Mock
    private DB db;

    @InjectMocks
    private YourClassUnderTest yourClassUnderTest; // TODO: Replace with your actual class name

    @BeforeEach
    public void setUp() {
        when(db.getAllNames()).thenReturn(new HashSet<>(Arrays.asList("collection", "map")));
        when(db.get("collection")).thenReturn(new ArrayList<>());
        when(db.get("map")).thenReturn(new HashMap<>());
    }

    @Test
    public void testClear_Collection() {
        Collection collection = mock(Collection.class);
        when(db.get("collection")).thenReturn(collection);

        yourClassUnderTest.clear();

        verify(collection, times(1)).clear();
        verify(db, times(1)).commit();
    }

    @Test
    public void testClear_Map() {
        Map map = mock(Map.class);
        when(db.get("map")).thenReturn(map);

        yourClassUnderTest.clear();

        verify(map, times(1)).clear();
        verify(db, times(1)).commit();
    }

    @Test
    public void testClear_EmptyDatabase() {
        when(db.getAllNames()).thenReturn(Collections.emptySet());

        yourClassUnderTest.clear();

        verify(db, times(1)).commit();
    }

    @Test
    public void testClear_NonCollectionNonMapObject() {
        when(db.get(anyString())).thenReturn(new Object());

        yourClassUnderTest.clear();

        verify(db, times(1)).commit();
    }
}
